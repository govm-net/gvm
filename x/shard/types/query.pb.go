// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gvm/shard/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetShardRequest struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetShardRequest) Reset()         { *m = QueryGetShardRequest{} }
func (m *QueryGetShardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetShardRequest) ProtoMessage()    {}
func (*QueryGetShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{2}
}
func (m *QueryGetShardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetShardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetShardRequest.Merge(m, src)
}
func (m *QueryGetShardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetShardRequest proto.InternalMessageInfo

func (m *QueryGetShardRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryGetShardResponse struct {
	Shard Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard"`
}

func (m *QueryGetShardResponse) Reset()         { *m = QueryGetShardResponse{} }
func (m *QueryGetShardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetShardResponse) ProtoMessage()    {}
func (*QueryGetShardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{3}
}
func (m *QueryGetShardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetShardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetShardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetShardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetShardResponse.Merge(m, src)
}
func (m *QueryGetShardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetShardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetShardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetShardResponse proto.InternalMessageInfo

func (m *QueryGetShardResponse) GetShard() Shard {
	if m != nil {
		return m.Shard
	}
	return Shard{}
}

type QueryAllShardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllShardRequest) Reset()         { *m = QueryAllShardRequest{} }
func (m *QueryAllShardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllShardRequest) ProtoMessage()    {}
func (*QueryAllShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{4}
}
func (m *QueryAllShardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllShardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllShardRequest.Merge(m, src)
}
func (m *QueryAllShardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllShardRequest proto.InternalMessageInfo

func (m *QueryAllShardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllShardResponse struct {
	Shard      []Shard             `protobuf:"bytes,1,rep,name=shard,proto3" json:"shard"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllShardResponse) Reset()         { *m = QueryAllShardResponse{} }
func (m *QueryAllShardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllShardResponse) ProtoMessage()    {}
func (*QueryAllShardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{5}
}
func (m *QueryAllShardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllShardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllShardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllShardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllShardResponse.Merge(m, src)
}
func (m *QueryAllShardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllShardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllShardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllShardResponse proto.InternalMessageInfo

func (m *QueryAllShardResponse) GetShard() []Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *QueryAllShardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetToParentRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetToParentRequest) Reset()         { *m = QueryGetToParentRequest{} }
func (m *QueryGetToParentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetToParentRequest) ProtoMessage()    {}
func (*QueryGetToParentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{6}
}
func (m *QueryGetToParentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetToParentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetToParentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetToParentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetToParentRequest.Merge(m, src)
}
func (m *QueryGetToParentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetToParentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetToParentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetToParentRequest proto.InternalMessageInfo

func (m *QueryGetToParentRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetToParentResponse struct {
	ToParent ToParent `protobuf:"bytes,1,opt,name=ToParent,proto3" json:"ToParent"`
}

func (m *QueryGetToParentResponse) Reset()         { *m = QueryGetToParentResponse{} }
func (m *QueryGetToParentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetToParentResponse) ProtoMessage()    {}
func (*QueryGetToParentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{7}
}
func (m *QueryGetToParentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetToParentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetToParentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetToParentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetToParentResponse.Merge(m, src)
}
func (m *QueryGetToParentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetToParentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetToParentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetToParentResponse proto.InternalMessageInfo

func (m *QueryGetToParentResponse) GetToParent() ToParent {
	if m != nil {
		return m.ToParent
	}
	return ToParent{}
}

type QueryAllToParentRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllToParentRequest) Reset()         { *m = QueryAllToParentRequest{} }
func (m *QueryAllToParentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllToParentRequest) ProtoMessage()    {}
func (*QueryAllToParentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{8}
}
func (m *QueryAllToParentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllToParentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllToParentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllToParentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllToParentRequest.Merge(m, src)
}
func (m *QueryAllToParentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllToParentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllToParentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllToParentRequest proto.InternalMessageInfo

func (m *QueryAllToParentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllToParentResponse struct {
	ToParent   []ToParent          `protobuf:"bytes,1,rep,name=ToParent,proto3" json:"ToParent"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllToParentResponse) Reset()         { *m = QueryAllToParentResponse{} }
func (m *QueryAllToParentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllToParentResponse) ProtoMessage()    {}
func (*QueryAllToParentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{9}
}
func (m *QueryAllToParentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllToParentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllToParentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllToParentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllToParentResponse.Merge(m, src)
}
func (m *QueryAllToParentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllToParentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllToParentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllToParentResponse proto.InternalMessageInfo

func (m *QueryAllToParentResponse) GetToParent() []ToParent {
	if m != nil {
		return m.ToParent
	}
	return nil
}

func (m *QueryAllToParentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetToLeftChildRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetToLeftChildRequest) Reset()         { *m = QueryGetToLeftChildRequest{} }
func (m *QueryGetToLeftChildRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetToLeftChildRequest) ProtoMessage()    {}
func (*QueryGetToLeftChildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{10}
}
func (m *QueryGetToLeftChildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetToLeftChildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetToLeftChildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetToLeftChildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetToLeftChildRequest.Merge(m, src)
}
func (m *QueryGetToLeftChildRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetToLeftChildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetToLeftChildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetToLeftChildRequest proto.InternalMessageInfo

func (m *QueryGetToLeftChildRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetToLeftChildResponse struct {
	ToLeftChild ToLeftChild `protobuf:"bytes,1,opt,name=ToLeftChild,proto3" json:"ToLeftChild"`
}

func (m *QueryGetToLeftChildResponse) Reset()         { *m = QueryGetToLeftChildResponse{} }
func (m *QueryGetToLeftChildResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetToLeftChildResponse) ProtoMessage()    {}
func (*QueryGetToLeftChildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{11}
}
func (m *QueryGetToLeftChildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetToLeftChildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetToLeftChildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetToLeftChildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetToLeftChildResponse.Merge(m, src)
}
func (m *QueryGetToLeftChildResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetToLeftChildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetToLeftChildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetToLeftChildResponse proto.InternalMessageInfo

func (m *QueryGetToLeftChildResponse) GetToLeftChild() ToLeftChild {
	if m != nil {
		return m.ToLeftChild
	}
	return ToLeftChild{}
}

type QueryAllToLeftChildRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllToLeftChildRequest) Reset()         { *m = QueryAllToLeftChildRequest{} }
func (m *QueryAllToLeftChildRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllToLeftChildRequest) ProtoMessage()    {}
func (*QueryAllToLeftChildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{12}
}
func (m *QueryAllToLeftChildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllToLeftChildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllToLeftChildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllToLeftChildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllToLeftChildRequest.Merge(m, src)
}
func (m *QueryAllToLeftChildRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllToLeftChildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllToLeftChildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllToLeftChildRequest proto.InternalMessageInfo

func (m *QueryAllToLeftChildRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllToLeftChildResponse struct {
	ToLeftChild []ToLeftChild       `protobuf:"bytes,1,rep,name=ToLeftChild,proto3" json:"ToLeftChild"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllToLeftChildResponse) Reset()         { *m = QueryAllToLeftChildResponse{} }
func (m *QueryAllToLeftChildResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllToLeftChildResponse) ProtoMessage()    {}
func (*QueryAllToLeftChildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{13}
}
func (m *QueryAllToLeftChildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllToLeftChildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllToLeftChildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllToLeftChildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllToLeftChildResponse.Merge(m, src)
}
func (m *QueryAllToLeftChildResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllToLeftChildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllToLeftChildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllToLeftChildResponse proto.InternalMessageInfo

func (m *QueryAllToLeftChildResponse) GetToLeftChild() []ToLeftChild {
	if m != nil {
		return m.ToLeftChild
	}
	return nil
}

func (m *QueryAllToLeftChildResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetToRightChildRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetToRightChildRequest) Reset()         { *m = QueryGetToRightChildRequest{} }
func (m *QueryGetToRightChildRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetToRightChildRequest) ProtoMessage()    {}
func (*QueryGetToRightChildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{14}
}
func (m *QueryGetToRightChildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetToRightChildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetToRightChildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetToRightChildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetToRightChildRequest.Merge(m, src)
}
func (m *QueryGetToRightChildRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetToRightChildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetToRightChildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetToRightChildRequest proto.InternalMessageInfo

func (m *QueryGetToRightChildRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetToRightChildResponse struct {
	ToRightChild ToRightChild `protobuf:"bytes,1,opt,name=ToRightChild,proto3" json:"ToRightChild"`
}

func (m *QueryGetToRightChildResponse) Reset()         { *m = QueryGetToRightChildResponse{} }
func (m *QueryGetToRightChildResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetToRightChildResponse) ProtoMessage()    {}
func (*QueryGetToRightChildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{15}
}
func (m *QueryGetToRightChildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetToRightChildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetToRightChildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetToRightChildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetToRightChildResponse.Merge(m, src)
}
func (m *QueryGetToRightChildResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetToRightChildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetToRightChildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetToRightChildResponse proto.InternalMessageInfo

func (m *QueryGetToRightChildResponse) GetToRightChild() ToRightChild {
	if m != nil {
		return m.ToRightChild
	}
	return ToRightChild{}
}

type QueryAllToRightChildRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllToRightChildRequest) Reset()         { *m = QueryAllToRightChildRequest{} }
func (m *QueryAllToRightChildRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllToRightChildRequest) ProtoMessage()    {}
func (*QueryAllToRightChildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{16}
}
func (m *QueryAllToRightChildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllToRightChildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllToRightChildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllToRightChildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllToRightChildRequest.Merge(m, src)
}
func (m *QueryAllToRightChildRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllToRightChildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllToRightChildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllToRightChildRequest proto.InternalMessageInfo

func (m *QueryAllToRightChildRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllToRightChildResponse struct {
	ToRightChild []ToRightChild      `protobuf:"bytes,1,rep,name=ToRightChild,proto3" json:"ToRightChild"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllToRightChildResponse) Reset()         { *m = QueryAllToRightChildResponse{} }
func (m *QueryAllToRightChildResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllToRightChildResponse) ProtoMessage()    {}
func (*QueryAllToRightChildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c77cf11ab6f8ee, []int{17}
}
func (m *QueryAllToRightChildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllToRightChildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllToRightChildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllToRightChildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllToRightChildResponse.Merge(m, src)
}
func (m *QueryAllToRightChildResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllToRightChildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllToRightChildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllToRightChildResponse proto.InternalMessageInfo

func (m *QueryAllToRightChildResponse) GetToRightChild() []ToRightChild {
	if m != nil {
		return m.ToRightChild
	}
	return nil
}

func (m *QueryAllToRightChildResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "gvm.shard.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "gvm.shard.QueryParamsResponse")
	proto.RegisterType((*QueryGetShardRequest)(nil), "gvm.shard.QueryGetShardRequest")
	proto.RegisterType((*QueryGetShardResponse)(nil), "gvm.shard.QueryGetShardResponse")
	proto.RegisterType((*QueryAllShardRequest)(nil), "gvm.shard.QueryAllShardRequest")
	proto.RegisterType((*QueryAllShardResponse)(nil), "gvm.shard.QueryAllShardResponse")
	proto.RegisterType((*QueryGetToParentRequest)(nil), "gvm.shard.QueryGetToParentRequest")
	proto.RegisterType((*QueryGetToParentResponse)(nil), "gvm.shard.QueryGetToParentResponse")
	proto.RegisterType((*QueryAllToParentRequest)(nil), "gvm.shard.QueryAllToParentRequest")
	proto.RegisterType((*QueryAllToParentResponse)(nil), "gvm.shard.QueryAllToParentResponse")
	proto.RegisterType((*QueryGetToLeftChildRequest)(nil), "gvm.shard.QueryGetToLeftChildRequest")
	proto.RegisterType((*QueryGetToLeftChildResponse)(nil), "gvm.shard.QueryGetToLeftChildResponse")
	proto.RegisterType((*QueryAllToLeftChildRequest)(nil), "gvm.shard.QueryAllToLeftChildRequest")
	proto.RegisterType((*QueryAllToLeftChildResponse)(nil), "gvm.shard.QueryAllToLeftChildResponse")
	proto.RegisterType((*QueryGetToRightChildRequest)(nil), "gvm.shard.QueryGetToRightChildRequest")
	proto.RegisterType((*QueryGetToRightChildResponse)(nil), "gvm.shard.QueryGetToRightChildResponse")
	proto.RegisterType((*QueryAllToRightChildRequest)(nil), "gvm.shard.QueryAllToRightChildRequest")
	proto.RegisterType((*QueryAllToRightChildResponse)(nil), "gvm.shard.QueryAllToRightChildResponse")
}

func init() { proto.RegisterFile("gvm/shard/query.proto", fileDescriptor_f0c77cf11ab6f8ee) }

var fileDescriptor_f0c77cf11ab6f8ee = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0xe3, 0x84, 0x20, 0x18, 0x56, 0xec, 0x32, 0x84, 0x5f, 0x06, 0x0c, 0x0c, 0x1b, 0x7e,
	0x09, 0x6c, 0xc1, 0xee, 0x5e, 0x77, 0x15, 0x56, 0xbb, 0x1c, 0x76, 0x0f, 0x90, 0xdd, 0x53, 0xa5,
	0x16, 0x39, 0x64, 0x70, 0xac, 0x3a, 0x1e, 0x13, 0x3b, 0x11, 0x08, 0xa1, 0x4a, 0x3d, 0x56, 0x15,
	0x42, 0xea, 0xad, 0x52, 0xaf, 0x55, 0xd5, 0x53, 0xff, 0x0c, 0x8e, 0x48, 0xbd, 0xf4, 0x54, 0x55,
	0x50, 0xa9, 0xff, 0x46, 0xe5, 0xf1, 0x4b, 0xfc, 0x3b, 0x01, 0x29, 0x17, 0x2b, 0xcc, 0xbc, 0x79,
	0xdf, 0xcf, 0xf7, 0x3d, 0xf3, 0xc6, 0x68, 0x42, 0x6b, 0xd5, 0x15, 0xbb, 0xa6, 0x36, 0xaa, 0xca,
	0x49, 0x93, 0x36, 0xce, 0x64, 0xab, 0xc1, 0x1c, 0x86, 0x87, 0xb5, 0x56, 0x5d, 0xe6, 0xcb, 0xe2,
	0x98, 0x5a, 0xd7, 0x4d, 0xa6, 0xf0, 0xa7, 0xb7, 0x2b, 0x16, 0x34, 0xa6, 0x31, 0xfe, 0x53, 0x71,
	0x7f, 0xc1, 0xea, 0x9c, 0xc6, 0x98, 0x66, 0x50, 0x45, 0xb5, 0x74, 0x45, 0x35, 0x4d, 0xe6, 0xa8,
	0x8e, 0xce, 0x4c, 0x1b, 0x76, 0x37, 0x8e, 0x98, 0x5d, 0x67, 0xb6, 0x52, 0x51, 0x6d, 0xea, 0x49,
	0x29, 0xad, 0xed, 0x0a, 0x75, 0xd4, 0x6d, 0xc5, 0x52, 0x35, 0xdd, 0xe4, 0xc1, 0x10, 0x3b, 0xe9,
	0x43, 0x59, 0x6a, 0x43, 0xad, 0xb7, 0x73, 0x04, 0x60, 0xf9, 0x13, 0x96, 0x67, 0xfc, 0x65, 0x87,
	0x1d, 0x5a, 0x6a, 0x83, 0x9a, 0x0e, 0x6c, 0xcd, 0x87, 0xb6, 0x0c, 0x7a, 0xec, 0x1c, 0x1e, 0xd5,
	0x74, 0xa3, 0x7d, 0x52, 0x0a, 0x6d, 0x37, 0x74, 0xad, 0x16, 0xda, 0x27, 0x05, 0x84, 0x0f, 0x5c,
	0xd4, 0x7d, 0x4e, 0x51, 0xa6, 0x27, 0x4d, 0x6a, 0x3b, 0xe4, 0x1f, 0x34, 0x1e, 0x5a, 0xb5, 0x2d,
	0x66, 0xda, 0x14, 0xff, 0x8a, 0x06, 0x3d, 0xda, 0x69, 0x61, 0x51, 0x58, 0x1b, 0xd9, 0x19, 0x93,
	0x3b, 0x45, 0x94, 0xbd, 0xd0, 0xdd, 0xe1, 0xeb, 0xcf, 0x0b, 0x99, 0x77, 0xdf, 0x3e, 0x6c, 0x08,
	0x65, 0x88, 0x25, 0x9b, 0xa8, 0xc0, 0x93, 0xed, 0x51, 0xe7, 0x3f, 0x37, 0x14, 0x44, 0x70, 0x01,
	0xe5, 0x75, 0xb3, 0x4a, 0x4f, 0x79, 0xb2, 0x81, 0xb2, 0xf7, 0x07, 0xf9, 0x0b, 0x4d, 0x44, 0xa2,
	0x41, 0x7c, 0x13, 0xe5, 0xb9, 0x12, 0x68, 0xff, 0x14, 0xd0, 0xe6, 0x81, 0xbb, 0x03, 0xae, 0x74,
	0xd9, 0x0b, 0x22, 0x4f, 0x40, 0xb4, 0x64, 0x18, 0x21, 0xd1, 0xbf, 0x11, 0xf2, 0x9b, 0x01, 0xa9,
	0x56, 0x64, 0xaf, 0x73, 0xb2, 0xdb, 0x39, 0xd9, 0x7b, 0x49, 0xa0, 0x73, 0xf2, 0xbe, 0xaa, 0x51,
	0x38, 0x5b, 0x0e, 0x9c, 0x24, 0x97, 0x02, 0x70, 0xfa, 0x02, 0x71, 0xce, 0x5c, 0x4f, 0x4e, 0xbc,
	0x17, 0xe2, 0xc9, 0x72, 0x9e, 0xd5, 0x9e, 0x3c, 0x9e, 0x54, 0x08, 0x68, 0x1d, 0x4d, 0xb5, 0xeb,
	0xf6, 0x3f, 0xdb, 0xe7, 0x6f, 0x48, 0xdb, 0xf3, 0x28, 0xca, 0xea, 0x55, 0xa8, 0x72, 0x56, 0xaf,
	0x92, 0x03, 0x34, 0x1d, 0x0f, 0x05, 0xfa, 0xdf, 0xd0, 0x50, 0x7b, 0x0d, 0xaa, 0x33, 0x1e, 0x30,
	0xd0, 0xde, 0x02, 0x0f, 0x9d, 0x50, 0xa2, 0x82, 0x7a, 0xc9, 0x30, 0xa2, 0xea, 0xfd, 0xaa, 0xf8,
	0x6b, 0x01, 0xb0, 0x43, 0x1a, 0x89, 0xd8, 0xb9, 0x7b, 0x62, 0xf7, 0xaf, 0xfa, 0x9b, 0x48, 0xf4,
	0x4b, 0xfa, 0x2f, 0x3d, 0x76, 0xfe, 0x74, 0xff, 0xc7, 0xd2, 0x1a, 0xf0, 0x18, 0xcd, 0x26, 0x46,
	0x83, 0x99, 0xdf, 0xd1, 0x48, 0x60, 0x19, 0x4a, 0x36, 0x19, 0xf2, 0xd3, 0xd9, 0x05, 0x4b, 0xc1,
	0x03, 0xa4, 0x0a, 0x30, 0xbc, 0x50, 0x31, 0x98, 0x7e, 0xf5, 0xe3, 0xad, 0x00, 0x2e, 0xa2, 0x32,
	0x69, 0x2e, 0x72, 0x0f, 0x72, 0xd1, 0xbf, 0xde, 0x6c, 0x05, 0xab, 0x5d, 0x76, 0x27, 0x60, 0xd7,
	0xe6, 0xa8, 0x68, 0x2e, 0x39, 0x1c, 0x7c, 0x95, 0xd0, 0x0f, 0xc1, 0x75, 0xa8, 0xe0, 0x54, 0xc8,
	0x98, 0xbf, 0x0d, 0xce, 0x42, 0x47, 0x08, 0x0d, 0x56, 0x2e, 0x4e, 0xd4, 0xaf, 0x0e, 0xbd, 0x17,
	0xc0, 0x4a, 0x4c, 0x27, 0xd5, 0x4a, 0xee, 0x81, 0x56, 0xfa, 0xd6, 0xa5, 0x9d, 0x37, 0xc3, 0x28,
	0xcf, 0x61, 0xf1, 0x53, 0x34, 0xe8, 0x5d, 0x26, 0x78, 0x3e, 0x40, 0x12, 0xbf, 0xa5, 0x44, 0x29,
	0x6d, 0xdb, 0x4b, 0x4f, 0xc8, 0xf3, 0x8f, 0x5f, 0x5f, 0x65, 0xe7, 0xb0, 0xa8, 0x68, 0xac, 0x55,
	0xdf, 0x32, 0xa9, 0xa3, 0x44, 0xaf, 0x5d, 0xdc, 0x44, 0x79, 0x3e, 0x95, 0xf1, 0x42, 0x34, 0x59,
	0xe4, 0xba, 0x12, 0x17, 0xd3, 0x03, 0x40, 0x6f, 0x9d, 0xeb, 0x2d, 0xe3, 0xa5, 0x24, 0x3d, 0xef,
	0x79, 0xce, 0x2f, 0xb9, 0x0b, 0x6c, 0xa1, 0x21, 0x7e, 0xb6, 0x64, 0x18, 0x71, 0xe5, 0xc8, 0x9d,
	0x15, 0x57, 0x8e, 0xde, 0x39, 0x64, 0x89, 0x2b, 0xcf, 0xe2, 0x99, 0x54, 0x65, 0xfc, 0xcc, 0x9f,
	0x90, 0x98, 0x24, 0x58, 0x89, 0x8c, 0x6d, 0x71, 0xb9, 0x6b, 0x0c, 0xe8, 0x6e, 0x70, 0xdd, 0x9f,
	0x31, 0x49, 0xd2, 0xed, 0x7c, 0xa9, 0x28, 0xe7, 0x7a, 0xf5, 0x02, 0x5f, 0xb8, 0xf3, 0xc0, 0x3b,
	0xef, 0xba, 0x26, 0x09, 0xa6, 0x7a, 0x32, 0x24, 0x8c, 0x7e, 0x52, 0xe4, 0x0c, 0x0b, 0x78, 0xbe,
	0x2b, 0x03, 0x7e, 0x29, 0x84, 0xe6, 0x11, 0x2e, 0x26, 0xfa, 0x8b, 0x4e, 0x4b, 0x71, 0xa5, 0x57,
	0x18, 0x50, 0xc8, 0x9c, 0x62, 0x0d, 0xaf, 0xa4, 0x50, 0xf8, 0x1f, 0x66, 0x5e, 0x35, 0x5e, 0x08,
	0x68, 0x34, 0x90, 0xc7, 0xad, 0x48, 0x31, 0xd1, 0x6d, 0x6f, 0xa2, 0xe4, 0xf9, 0xdb, 0xfd, 0x6d,
	0x0c, 0x11, 0xe1, 0x2b, 0x21, 0x3c, 0x08, 0x70, 0xb2, 0xeb, 0xd8, 0xa4, 0x12, 0x57, 0x7b, 0xc6,
	0x01, 0x8c, 0xc2, 0x61, 0xd6, 0xf1, 0x6a, 0x0a, 0x4c, 0xe0, 0xc3, 0xd4, 0xab, 0xcf, 0xa5, 0x80,
	0x7e, 0x0c, 0x66, 0x72, 0x0b, 0x94, 0xec, 0xfc, 0x1e, 0x54, 0x29, 0xf3, 0xaf, 0xe7, 0xeb, 0x1b,
	0xa0, 0xda, 0xfd, 0xe3, 0xfa, 0x56, 0x12, 0x6e, 0x6e, 0x25, 0xe1, 0xcb, 0xad, 0x24, 0x5c, 0xdd,
	0x49, 0x99, 0x9b, 0x3b, 0x29, 0xf3, 0xe9, 0x4e, 0xca, 0x3c, 0x2a, 0x6a, 0xba, 0x53, 0x6b, 0x56,
	0xe4, 0x23, 0x56, 0x0f, 0xe7, 0x39, 0x6d, 0x67, 0x3a, 0xb3, 0xa8, 0x5d, 0x19, 0xe4, 0x1f, 0xdc,
	0xbf, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xa2, 0x29, 0x27, 0x90, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Shard items.
	Shard(ctx context.Context, in *QueryGetShardRequest, opts ...grpc.CallOption) (*QueryGetShardResponse, error)
	ShardAll(ctx context.Context, in *QueryAllShardRequest, opts ...grpc.CallOption) (*QueryAllShardResponse, error)
	// Queries a list of ToParent items.
	ToParent(ctx context.Context, in *QueryGetToParentRequest, opts ...grpc.CallOption) (*QueryGetToParentResponse, error)
	ToParentAll(ctx context.Context, in *QueryAllToParentRequest, opts ...grpc.CallOption) (*QueryAllToParentResponse, error)
	// Queries a list of ToLeftChild items.
	ToLeftChild(ctx context.Context, in *QueryGetToLeftChildRequest, opts ...grpc.CallOption) (*QueryGetToLeftChildResponse, error)
	ToLeftChildAll(ctx context.Context, in *QueryAllToLeftChildRequest, opts ...grpc.CallOption) (*QueryAllToLeftChildResponse, error)
	// Queries a list of ToRightChild items.
	ToRightChild(ctx context.Context, in *QueryGetToRightChildRequest, opts ...grpc.CallOption) (*QueryGetToRightChildResponse, error)
	ToRightChildAll(ctx context.Context, in *QueryAllToRightChildRequest, opts ...grpc.CallOption) (*QueryAllToRightChildResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Shard(ctx context.Context, in *QueryGetShardRequest, opts ...grpc.CallOption) (*QueryGetShardResponse, error) {
	out := new(QueryGetShardResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/Shard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShardAll(ctx context.Context, in *QueryAllShardRequest, opts ...grpc.CallOption) (*QueryAllShardResponse, error) {
	out := new(QueryAllShardResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/ShardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ToParent(ctx context.Context, in *QueryGetToParentRequest, opts ...grpc.CallOption) (*QueryGetToParentResponse, error) {
	out := new(QueryGetToParentResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/ToParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ToParentAll(ctx context.Context, in *QueryAllToParentRequest, opts ...grpc.CallOption) (*QueryAllToParentResponse, error) {
	out := new(QueryAllToParentResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/ToParentAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ToLeftChild(ctx context.Context, in *QueryGetToLeftChildRequest, opts ...grpc.CallOption) (*QueryGetToLeftChildResponse, error) {
	out := new(QueryGetToLeftChildResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/ToLeftChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ToLeftChildAll(ctx context.Context, in *QueryAllToLeftChildRequest, opts ...grpc.CallOption) (*QueryAllToLeftChildResponse, error) {
	out := new(QueryAllToLeftChildResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/ToLeftChildAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ToRightChild(ctx context.Context, in *QueryGetToRightChildRequest, opts ...grpc.CallOption) (*QueryGetToRightChildResponse, error) {
	out := new(QueryGetToRightChildResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/ToRightChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ToRightChildAll(ctx context.Context, in *QueryAllToRightChildRequest, opts ...grpc.CallOption) (*QueryAllToRightChildResponse, error) {
	out := new(QueryAllToRightChildResponse)
	err := c.cc.Invoke(ctx, "/gvm.shard.Query/ToRightChildAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Shard items.
	Shard(context.Context, *QueryGetShardRequest) (*QueryGetShardResponse, error)
	ShardAll(context.Context, *QueryAllShardRequest) (*QueryAllShardResponse, error)
	// Queries a list of ToParent items.
	ToParent(context.Context, *QueryGetToParentRequest) (*QueryGetToParentResponse, error)
	ToParentAll(context.Context, *QueryAllToParentRequest) (*QueryAllToParentResponse, error)
	// Queries a list of ToLeftChild items.
	ToLeftChild(context.Context, *QueryGetToLeftChildRequest) (*QueryGetToLeftChildResponse, error)
	ToLeftChildAll(context.Context, *QueryAllToLeftChildRequest) (*QueryAllToLeftChildResponse, error)
	// Queries a list of ToRightChild items.
	ToRightChild(context.Context, *QueryGetToRightChildRequest) (*QueryGetToRightChildResponse, error)
	ToRightChildAll(context.Context, *QueryAllToRightChildRequest) (*QueryAllToRightChildResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Shard(ctx context.Context, req *QueryGetShardRequest) (*QueryGetShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shard not implemented")
}
func (*UnimplementedQueryServer) ShardAll(ctx context.Context, req *QueryAllShardRequest) (*QueryAllShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardAll not implemented")
}
func (*UnimplementedQueryServer) ToParent(ctx context.Context, req *QueryGetToParentRequest) (*QueryGetToParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToParent not implemented")
}
func (*UnimplementedQueryServer) ToParentAll(ctx context.Context, req *QueryAllToParentRequest) (*QueryAllToParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToParentAll not implemented")
}
func (*UnimplementedQueryServer) ToLeftChild(ctx context.Context, req *QueryGetToLeftChildRequest) (*QueryGetToLeftChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToLeftChild not implemented")
}
func (*UnimplementedQueryServer) ToLeftChildAll(ctx context.Context, req *QueryAllToLeftChildRequest) (*QueryAllToLeftChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToLeftChildAll not implemented")
}
func (*UnimplementedQueryServer) ToRightChild(ctx context.Context, req *QueryGetToRightChildRequest) (*QueryGetToRightChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToRightChild not implemented")
}
func (*UnimplementedQueryServer) ToRightChildAll(ctx context.Context, req *QueryAllToRightChildRequest) (*QueryAllToRightChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToRightChildAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Shard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Shard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/Shard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Shard(ctx, req.(*QueryGetShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/ShardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShardAll(ctx, req.(*QueryAllShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ToParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetToParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ToParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/ToParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ToParent(ctx, req.(*QueryGetToParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ToParentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllToParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ToParentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/ToParentAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ToParentAll(ctx, req.(*QueryAllToParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ToLeftChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetToLeftChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ToLeftChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/ToLeftChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ToLeftChild(ctx, req.(*QueryGetToLeftChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ToLeftChildAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllToLeftChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ToLeftChildAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/ToLeftChildAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ToLeftChildAll(ctx, req.(*QueryAllToLeftChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ToRightChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetToRightChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ToRightChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/ToRightChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ToRightChild(ctx, req.(*QueryGetToRightChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ToRightChildAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllToRightChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ToRightChildAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gvm.shard.Query/ToRightChildAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ToRightChildAll(ctx, req.(*QueryAllToRightChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gvm.shard.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Shard",
			Handler:    _Query_Shard_Handler,
		},
		{
			MethodName: "ShardAll",
			Handler:    _Query_ShardAll_Handler,
		},
		{
			MethodName: "ToParent",
			Handler:    _Query_ToParent_Handler,
		},
		{
			MethodName: "ToParentAll",
			Handler:    _Query_ToParentAll_Handler,
		},
		{
			MethodName: "ToLeftChild",
			Handler:    _Query_ToLeftChild_Handler,
		},
		{
			MethodName: "ToLeftChildAll",
			Handler:    _Query_ToLeftChildAll_Handler,
		},
		{
			MethodName: "ToRightChild",
			Handler:    _Query_ToRightChild_Handler,
		},
		{
			MethodName: "ToRightChildAll",
			Handler:    _Query_ToRightChildAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gvm/shard/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetShardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetShardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetShardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetShardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetShardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetShardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shard.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllShardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllShardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllShardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllShardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllShardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllShardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Shard) > 0 {
		for iNdEx := len(m.Shard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetToParentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetToParentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetToParentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetToParentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetToParentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetToParentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ToParent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllToParentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllToParentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllToParentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllToParentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllToParentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllToParentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToParent) > 0 {
		for iNdEx := len(m.ToParent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToParent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetToLeftChildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetToLeftChildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetToLeftChildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetToLeftChildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetToLeftChildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetToLeftChildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ToLeftChild.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllToLeftChildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllToLeftChildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllToLeftChildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllToLeftChildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllToLeftChildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllToLeftChildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToLeftChild) > 0 {
		for iNdEx := len(m.ToLeftChild) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToLeftChild[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetToRightChildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetToRightChildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetToRightChildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetToRightChildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetToRightChildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetToRightChildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ToRightChild.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllToRightChildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllToRightChildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllToRightChildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllToRightChildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllToRightChildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllToRightChildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToRightChild) > 0 {
		for iNdEx := len(m.ToRightChild) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToRightChild[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetShardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryGetShardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shard.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllShardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllShardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shard) > 0 {
		for _, e := range m.Shard {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetToParentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetToParentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ToParent.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllToParentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllToParentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ToParent) > 0 {
		for _, e := range m.ToParent {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetToLeftChildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetToLeftChildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ToLeftChild.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllToLeftChildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllToLeftChildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ToLeftChild) > 0 {
		for _, e := range m.ToLeftChild {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetToRightChildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetToRightChildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ToRightChild.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllToRightChildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllToRightChildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ToRightChild) > 0 {
		for _, e := range m.ToRightChild {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetShardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetShardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetShardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetShardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetShardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetShardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllShardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllShardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllShardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllShardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllShardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllShardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = append(m.Shard, Shard{})
			if err := m.Shard[len(m.Shard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetToParentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetToParentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetToParentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetToParentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetToParentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetToParentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToParent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToParent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllToParentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllToParentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllToParentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllToParentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllToParentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllToParentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToParent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToParent = append(m.ToParent, ToParent{})
			if err := m.ToParent[len(m.ToParent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetToLeftChildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetToLeftChildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetToLeftChildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetToLeftChildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetToLeftChildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetToLeftChildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLeftChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToLeftChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllToLeftChildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllToLeftChildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllToLeftChildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllToLeftChildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllToLeftChildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllToLeftChildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLeftChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToLeftChild = append(m.ToLeftChild, ToLeftChild{})
			if err := m.ToLeftChild[len(m.ToLeftChild)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetToRightChildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetToRightChildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetToRightChildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetToRightChildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetToRightChildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetToRightChildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToRightChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToRightChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllToRightChildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllToRightChildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllToRightChildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllToRightChildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllToRightChildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllToRightChildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToRightChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToRightChild = append(m.ToRightChild, ToRightChild{})
			if err := m.ToRightChild[len(m.ToRightChild)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
